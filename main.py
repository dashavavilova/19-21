print("задание 19:")

def f(x, y, h): #функция проверки может ли ректор выиграть своим первым ходом
    # x == 1 куча, у == 2 куча, h == номер хода(первый ход поступающнго = 2 и тд.)
    # победой является только третий ход(ход ректора) и только если в сумме в двух кучах больше 99
    if h == 2: #после хода поступающего ректор, чтобы победить он умножает на 2 максимальную кучу из двух и прибавляет минимальную
        return f(max(x, y) * 2, min(x, y), h + 1)
    if x + y > 99 and h == 3: #первый ход ректора и сумма больше == True
        return True
    elif x + y <= 99 and h == 3: #первый ход ректора, но сумма не больше 99 == False
        return False
    elif x + y > 99: #в любом другом случае, когда сумма камней в кучах больше 99(при первом ходе поступающего) == False
        return False
    return f(x + 3, y, h + 1) and f(x, y + 3, h + 1) and f(x * 2, y, h + 1) and f(x, y * 2, h + 1) #для победы нужно чтобы при любых ходах поступающего ректор выигрывал, поэтому and

for i in range(1, 89): #перебор всех значений  N
    if f(10, i, 1) is True:
        print(i)
        break


print("задание 20")

def f(x, y, h):#функция проверки может ли поступающий выиграть только своим вторым ходом
    # x == 1 куча, у == 2 куча, h == номер хода(первый ход поступающнго = 2 и тд.)
    # победой является только четвертый ход(второй ход поступающего) и только если в сумме в двух кучах больше 99
    if x + y > 99 and h == 4: #второй ход поступающего и сумма больше 99 == True
        return True
    elif x + y <= 99 and h == 4: #второй ход поступающего, но сумма не больше 99 == False
        return False
    elif x + y > 99:
    #в любом другом случае, когда сумма камней в кучах больше 99(при первом ходе поступающего или первым ходом ректора) == False
        return False
    if h % 2 == 0:
        #четные ходы - это ходы поступающего, так как нужна победа при любых его ходах соперника используется and
        return f(x + 3, y, h + 1) and f(x, y + 3, h + 1) and f(x * 2, y, h + 1) and f(x, y * 2, h + 1)
    else:
        # нечетные ходы - это ходы ректора, возращаются через or
        return f(x + 3, y, h + 1) or f(x, y + 3, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)


for i in range(1, 89): #перебор всех значений  N
    if f(10, i, 1) is True:
        print(i) #вывод всех значений при которых поступающий может выиграть вторым ходом


print("задание 21")
def f(x, y, h): # функция, которая проверяет может ли ректор выиграть либо первым, либо вторым ходом
    # x == 1 куча, у == 2 куча, h == номер хода(первый ход поступающнго = 2 и тд.)
    # победой является либо 3 либо 5 ход(первый или второй ход ректора) и только если в сумме в двух кучах больше 99
    if x + y > 99 and (h == 3 or h == 5): #первый или второй ход ректора и сумма больше 99
        return True
    elif x + y <= 99 and h == 5: #второй ход ректора но сумма не больше 99
        return False
    elif x + y > 99: #в любом другом случае, когда сумма камней в кучах больше 99
        return False
    if h % 2 == 1:
        #нечетные ходы - это ходы ректора, так как нужна победа при любых его ходах соперника используется and
        return f(x + 3, y, h + 1) and f(x, y + 3, h + 1) and f(x * 2, y, h + 1) and f(x, y * 2, h + 1)
    else:
        #четные ходы - это ходы поступающего, возращаются через or
        return f(x + 3, y, h + 1) or f(x, y + 3, h + 1) or f(x * 2, y, h + 1) or f(x, y * 2, h + 1)


def f_pr(x, y, h): #функция, которая проверяет может ли ректор выиграть первым ходом
    if x + y > 99 and (h == 3):
        return True
    elif x + y < 100 and h == 5:
        return False
    elif x + y > 99:
        return False
    if h % 2 == 1:
        return f_pr(x + 3, y, h + 1) and f_pr(x, y + 3, h + 1) and f_pr(x * 2, y, h + 1) and f_pr(x, y * 2, h + 1)
    else:
        return f_pr(x + 3, y, h + 1) or f_pr(x, y + 3, h + 1) or f_pr(x * 2, y, h + 1) or f_pr(x, y * 2, h + 1)


print("либо 1, либо 2")
for i in range(1, 89):
    if f(10, i, 1) is True:
        print(i)
print("только 1")
for i in range(1, 89):
    if f_pr(10, i, 1) is True:
        print(i)